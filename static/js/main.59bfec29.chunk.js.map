{"version":3,"sources":["components/Buttons.js","screens/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["ProgressBar","progress","size","CircularProgress","thickness","variant","color","value","style","marginLeft","opacity","PlayPause","play","togglePlay","className","backgroundColor","padding","cursor","onClick","Reset","resetInput","parseHours","time","op","getHours","length","parseMin","getMinutes","parseSec","getSeconds","isNumeric","str","isNaN","parseFloat","isTimeZero","getWindowDimensions","window","width","innerWidth","height","innerHeight","Timer","useState","setPlay","initial","setInitial","Date","setTime","secondsPassed","getTime","totalSeconds","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","timer","setTimeout","alert","decrementTimer","clearTimeout","removeEventListener","position","top","left","transform","Math","min","onChange","e","target","hour","substring","setHours","setMinutes","sec","setSeconds","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59bfec29.chunk.js","sourcesContent":["import {React} from 'react';\r\nimport './Buttons.css';\r\nimport {FiRotateCcw} from \"react-icons/fi\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst ProgressBar = ({progress,size}) => {\r\n    return (<>\r\n        <CircularProgress size={size} thickness={0.35} variant=\"determinate\" color=\"secondary\" value={progress}/>\r\n        <CircularProgress size={size} thickness={0.25} variant=\"determinate\" style={{color:'white' ,marginLeft:-1*size,opacity:'5%'}} value={100} />\r\n    </>);\r\n}\r\n\r\nconst PlayPause = ({play,togglePlay}) => {\r\n    return (\r\n        <div className='button-outer' style={{backgroundColor:'black',padding:'5px',cursor:'pointer'}}  onClick={()=>{togglePlay()}}>\r\n            <div className={play?'play':'pause'}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Reset = ({resetInput}) => {\r\n    \r\n    return (\r\n        <div className='button-outer' onClick={()=>{resetInput()}}>\r\n            <FiRotateCcw size={'100px'} style={{cursor:'pointer'}} />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport {PlayPause,Reset,ProgressBar};","import { React, useState,useEffect } from 'react';\r\nimport { PlayPause, Reset, ProgressBar } from '../components/Buttons';\r\nimport './Timer.css';\r\n\r\nconst decrementTimer = (time) => {\r\n    return new Date(time.getTime()-1000);\r\n}\r\n\r\nconst parseHours = (time) => {\r\n    let op = ''+time.getHours();\r\n    if(op.length === 1)\r\n        op = '0'+op;\r\n    return op;\r\n}\r\nconst parseMin = (time) => {\r\n    let op = ''+time.getMinutes();\r\n    if(op.length === 1)\r\n        op = '0'+op;\r\n    return op;\r\n}\r\nconst parseSec = (time) => {\r\n    let op = ''+time.getSeconds();\r\n    if(op.length === 1)\r\n        op = '0'+op;\r\n    return op;\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n           !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n  }\r\n\r\nconst isTimeZero = (time) => {\r\n    if(+parseHours(time) === 0 && +parseMin(time)===0 && +parseSec(time) === 0)\r\n        return true;\r\n    return false;\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n      width,\r\n      height\r\n    };\r\n  }\r\n\r\nconst Timer = () => {\r\n\r\n    const [play, setPlay] = useState(true);\r\n    const [initial,setInitial] = useState(0);\r\n    const [time, setTime] = useState(new Date(2020, 0, 0, 0, 0, 0, 0));\r\n    const secondsPassed = (initial-time.getTime())/1000;\r\n    const totalSeconds = (initial-new Date(2020, 0, 0, 0, 0, 0, 0).getTime())/1000;\r\n    let progress = 100*secondsPassed/totalSeconds;\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n    if(totalSeconds <= 0)\r\n        progress = 0;\r\n    useEffect(()=>{\r\n        \r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n        window.addEventListener('resize', handleResize);\r\n        const timer=setTimeout(() => {\r\n            if(!play && isTimeZero(time)){\r\n                setPlay(true);\r\n                alert(\"countdown zero\");\r\n            }\r\n            if(!play && !isTimeZero(time))\r\n                setTime(decrementTimer(time));\r\n            \r\n          }, 1000);\r\n          return () => {clearTimeout(timer);window.removeEventListener('resize', handleResize);}\r\n\r\n    },[play,time]);\r\n\r\n   \r\n    return (\r\n        <div className='timer-main'>\r\n            <div className='top'>\r\n            <div className='prog'>\r\n                <div style={{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%,-50%)'}}>\r\n                    <ProgressBar progress={progress} size={Math.min(400,windowDimensions.width*0.8)} />\r\n                </div>\r\n                <div className='input' >\r\n                    <input className='hour' value={parseHours(time)} onChange={(e)=>{\r\n                        if(!isNumeric(e.target.value))\r\n                            return;\r\n                        let hour = e.target.value.substring(0,2);\r\n                        if(+hour<24){\r\n                            setInitial(time.setHours(+hour));\r\n                            setTime(new Date(time.setHours(+hour)));\r\n                        }\r\n                    }} /> {'  :  '}\r\n                    <input className='min' value={parseMin(time)} onChange={(e)=>{\r\n                        if(!isNumeric(e.target.value))\r\n                            return;\r\n                        let min = e.target.value.substring(0,2);\r\n                        if(+min<60){\r\n                            setInitial(time.setMinutes(+min));\r\n                            setTime(new Date(time.setMinutes(+min)));\r\n                        }\r\n                    }}/> {'  :  '}\r\n                    <input className='sec' value={parseSec(time)} onChange={(e)=>{\r\n                        if(!isNumeric(e.target.value))\r\n                            return;\r\n                        let sec = e.target.value.substring(0,2);\r\n                        if(+sec<60){\r\n                            setInitial(time.setSeconds(+sec));\r\n                            setTime(new Date(time.setSeconds(+sec)));\r\n                        }\r\n                    }}/>\r\n                </div>\r\n                \r\n            </div>\r\n            </div>\r\n            <div className='controls'>\r\n                <div className='control'>\r\n                    <PlayPause play={play} togglePlay={() => {\r\n                         setPlay(!play);\r\n                    }} />\r\n                </div>\r\n                <div className='control'>\r\n                    <Reset resetInput={() => { setInitial(0);setTime(new Date(2020, 0, 0, 0, 0, 0, 0)) }} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import {React} from 'react';\nimport Timer from './screens/Timer';\n\nconst App = () => {\n  return <Timer/>\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}